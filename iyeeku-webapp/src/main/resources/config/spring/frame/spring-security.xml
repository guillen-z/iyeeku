<beans:beans
        xmlns="http://www.springframework.org/schema/security"
        xmlns:beans="http://www.springframework.org/schema/beans"
        xmlns:p="http://www.springframework.org/schema/p"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:sec="http://www.springframework.org/schema/security"
        xsi:schemaLocation="http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/security
              http://www.springframework.org/schema/security/spring-security.xsd">


    <!-- 不需要权限访问的 -->
    <sec:http pattern="/resource/**/*.*" security="none"/>
    <sec:http pattern="/common/**/*.*" security="none"/>
    <sec:http pattern="/frame/**/*.*" security="none"/>
    <sec:http pattern="/frame1/**/*.*" security="none"/>
    <sec:http pattern="/directory/**/*" security="none"/>
    <sec:http pattern="/machineStatus/listener" security="none"/>  <!-- websocket -->
    <sec:http pattern="/develop/**/*" security="none"/>
    <sec:http pattern="/favicon.ico" security="none"/>
    <sec:http pattern="/remoctr/*" security="none"/> <!-- 远程手机控制接口不设权限控制 -->
    <sec:http pattern="/WEB-INF/jsp/login" security="none"/>
    <!-- 登陆页面，登陆重定向页面，忘记密码页面不过滤 -->
    <sec:http pattern="/login/login" security="none"/>
    <sec:http pattern="/login/redirect" security="none"/>

    <!--以上部分可根据自己的需求设定那些事不需要拦截的，然后直接放行就ok了-->


    <sec:http use-expressions="true" auto-config="true">
        <!-- SpringSecurityiFrame'X-Frame-Options'to'deny'报错的解决方法 -->
        <headers>
            <frame-options policy="SAMEORIGIN"/>
        </headers>
        <!-- 没有权限跳转页面 -->
        <sec:access-denied-handler error-page="/common/accessDenied"/>

        <sec:form-login login-page="/login/login"
                        authentication-failure-url="/login/login?error=true"
                        default-target-url="/login/main"/>
        <sec:logout invalidate-session="true" logout-success-url="/login/login"/>

        <sec:session-management invalid-session-url="/login/sessionTimeout"/>
        <sec:custom-filter ref="iyeekuLoginProcessingFilter" before="FORM_LOGIN_FILTER"/>
        <sec:custom-filter ref="iyeekuFilterSecurityInterceptor" before="FILTER_SECURITY_INTERCEPTOR"/>
        <sec:custom-filter ref="iyeekuSessionFilter" before="CONCURRENT_SESSION_FILTER"/>
        <sec:csrf request-matcher-ref="defaultRequiresCsrfMatches" token-repository-ref="csrfTokenReposity"/>

        <!-- 1、注释此过滤器，不再验证是否有访问权限(访问所有资源不再判断是否具有权限)
            2、注释此过滤器，并更改max-sessions="9999",可用一个账号登陆9999次,
            并且不再验证是否有访问权限(访问所有资源不再判断是否具有权限) -->
    </sec:http>

    <!-- csrfMatcher -->
    <beans:bean id="defaultRequiresCsrfMatches" class="com.iyeeku.core.security.csrf.IyeekuRequiresCsrfMatches"/>
    <beans:bean id="csrfTokenReposity" class="org.springframework.security.web.csrf.HttpSessionCsrfTokenRepository"/>


    <beans:bean id="iyeekuLoginProcessingFilter" class="com.iyeeku.core.security.IyeekuLoginProcessingFilter">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <!--<beans:property name="authenticationFailureHandler" ref=""/>-->
        <beans:property name="sessionAuthenticationStrategy" ref="sas"/>
        <beans:property name="authenticationSuccessHandler" ref="authenticationSuccessHandler"/>
    </beans:bean>

    <beans:bean id="iyeekuSessionFilter" class="com.iyeeku.core.security.session.IyeekuConcurrentSessionFilter">
        <beans:property name="sessionRegistry" ref="sessionRegistry"/>
        <beans:property name="expireUrl" value="/login/login?error=true"/>
    </beans:bean>

    <beans:bean id="sessionRegistry" class="com.iyeeku.core.security.session.IyeekuSessionRegistryImpl">
        <beans:property name="sessionService" ref="iyeekuSessionServiceImpl"/>
    </beans:bean>

    <beans:bean id="sas" class="org.springframework.security.web.authentication.session.CompositeSessionAuthenticationStrategy">
        <beans:constructor-arg>
            <beans:list>
                <beans:bean class="org.springframework.security.web.authentication.session.ConcurrentSessionControlAuthenticationStrategy">
                    <beans:constructor-arg ref="sessionRegistry"/>
                    <beans:property name="maximumSessions" value="#{iyeekuSessionServiceImpl.getAllowedMaxSession()}"/>
                    <beans:property name="exceptionIfMaximumExceeded" value="#{iyeekuSessionServiceImpl.isRejectLoginMaxSession()}"/>
                </beans:bean>
                <beans:bean class="org.springframework.security.web.authentication.session.SessionFixationProtectionStrategy"/>
                <beans:bean class="org.springframework.security.web.authentication.session.RegisterSessionAuthenticationStrategy">
                    <beans:constructor-arg ref="sessionRegistry"/>
                </beans:bean>
            </beans:list>
        </beans:constructor-arg>
    </beans:bean>

    <beans:bean id="authenticationSuccessHandler" class="org.springframework.security.web.authentication.SavedRequestAwareAuthenticationSuccessHandler">
        <beans:property name="defaultTargetUrl" value="/login/main"/>
        <beans:property name="alwaysUseDefaultTargetUrl" value="true"/>
    </beans:bean>

    <!-- 认证管理器 -->
    <sec:authentication-manager alias="authenticationManager">
        <sec:authentication-provider ref="iyeekuAuthenticationProvider"/>
    </sec:authentication-manager>

    <beans:bean id="iyeekuAuthenticationProvider" class="com.iyeeku.core.security.IyeekuAuthenticationProvider">
        <beans:property name="iyeekuUserDetailsService" ref="userServiceManager"/>
        <beans:property name="passwordEncoder" ref="passwordEncoder"/>
        <beans:property name="hideUserNotFoundExceptions" value="false"/>
    </beans:bean>

    <!-- 一个自定义的Filter,必须包含必须包含authenticationManager,accessDecisionManager,securityMetadataSource三个属性 -->
    <beans:bean id="iyeekuFilterSecurityInterceptor" class="com.iyeeku.core.security.IyeekuFilterSecurityInterceptor">
        <beans:property name="authenticationManager" ref="authenticationManager"/>
        <beans:property name="accessDecisionManager" ref="accessDescisionManager"/>
        <beans:property name="securityMetadataSource" ref="securityMetadataSource"/>
    </beans:bean>

    <!-- 资源源数据定义 -->
    <beans:bean id="securityMetadataSource" class="com.iyeeku.core.security.IyeekuSecurityMetadataSource">
        <beans:constructor-arg name="loginCheck" value="true"/>
        <beans:constructor-arg name="urlCheck" value="true"/>
    </beans:bean>
    <!-- 访问决策器 -->
    <beans:bean id="accessDescisionManager" class="com.iyeeku.core.security.IyeekuAccessDescisionManager"/>

    <beans:bean id="userServiceManager" class="com.iyeeku.core.security.IyeekuUserDetailsService">
        <beans:property name="userDetailsDao" ref="iyeekuExtUserDetailsDao"/>
    </beans:bean>


<!--    <authentication-manager alias="authenticationManager" erase-credentials="false">
        <authentication-provider user-service-ref="userServiceDetail">
            <password-encoder ref="passwordEncoder"></password-encoder>
        </authentication-provider>
    </authentication-manager>-->

    <!-- SHA加密方式 -->
    <beans:bean id="passwordEncoder" class="org.springframework.security.authentication.encoding.ShaPasswordEncoder" />




</beans:beans>